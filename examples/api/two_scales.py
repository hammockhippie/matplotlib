"""
===========================
Plots with different scales
===========================

Demonstrate how to do two plots on the same axes with different left and
right scales.

The trick is to use *two different axes* that share the same *x* axis.
You can use separate `matplotlib.ticker` formatters and locators as
desired since the two axes are independent.

Such axes are generated by calling the `Axes.twinx` method.  Likewise,
`Axes.twiny` is available to generate axes that share a *y* axis but
have different top and bottom scales.
"""

import numpy as np
import matplotlib.pyplot as plt

def two_scales(ax1, ax2, time, data1, data2, param1_dic , param2_dic):
    """

    Parameters
    ----------
    ax : (type of axis)
        A description of axis

    data1: (first dataset)
        A description of data1

    data2 : (first dataset)
        A description of data2

    param_dic : This is a dictionary of the parameters of the style and color e.g. {line style: '-', text color = 'r'}
    Returns
    -------
    Overlays
    data1 : (Plot first data set)
    data2 : (Plot second data set)

     """
    def color_y_axes(ax, color):
        """Color your axes."""
        for t in ax.get_yticklabels():
            t.set_color(color)
        return None


    ax1.plot(time, data1, param1_dic['color'] + param1_dic['style'])
    ax1.set_xlabel('time (s)')
    # Make the y-axis label and tick labels match the line color.
    ax1.set_ylabel('exp', color=param1_dic['color'])
    color_y_axes(ax1, param1_dic['color'])


    ax2.plot(time, data2, param2_dic['color'] + param2_dic['style'])
    ax2.set_ylabel('sin', color=param2_dic['color'])
    color_y_axes(ax2, param2_dic['color'])
    return plt.show()

#Create some mock data
t = np.arange(0.01, 10.0, 0.01)
s1 = np.exp(t)
s2 = np.sin(2*np.pi*t)

#Specify your parameter dictionary
d1 = {'style': '-', 'color' : 'r'}
d2 = {'style': '.', 'color' :'b'}

#create your axes
fig, ax = plt.subplots()
ax2 = ax.twinx()

#Call the function
two_scales(ax, ax2, t, s1, s2, d1, d2)

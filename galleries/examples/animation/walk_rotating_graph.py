"""
====================
Animation: Node Walk
====================
Animation example, illustrating a random walk on nodes of a graph
generated by NetworkX as a 3D view rotates.

Output generated via `matplotlib.animation.Animation.to_jshtml`.
"""

import numpy as np
import networkx as nx
import random
import matplotlib.pyplot as plt
from matplotlib import animation

# %%
# Pick a NetworkX graph for visualization in 3D.

G = nx.dodecahedral_graph()

# %%
# Position nodes of the graph in 3D using NetworkX spectral layout.

pos = nx.spectral_layout(G, dim=3)
nodes = np.array([pos[v] for v in G])
edges = np.array([(pos[u], pos[v]) for u, v in G.edges()])

# %%
# Generate a 3D plot of the graph


def init():
    ax.clear()
    ax.scatter(*nodes.T, alpha=0.2, s=100, color="blue")
    for vizedge in edges:
        ax.plot(*vizedge.T, color="gray")
    # Intialize the "walking" node
    ax.plot(*nodes[0], alpha=1, marker="s", color="red")
    ax.grid(False)
    ax.set_axis_off()

# %%
# Update the plot with the the "walking" node travalling
# to a new neighbor every 5 frames and rotate the view every frame.


def _frame_update(index):
    global node
    # The  "walking" node only travels to its neighbors.
    neighbors = list(G.neighbors(node))
    # Update "current" node every 5 frames
    if index % 5 == 0:
        # Update node
        node = random.choice(neighbors)
        # Update the last line object, which corresponds to the walking node
        ax.lines[-1].set_data_3d(nodes[node][:, np.newaxis])
    # Update view
    ax.view_init(index * 0.2, index * 0.5)

fig = plt.figure(layout='tight')
ax = fig.add_subplot(111, projection="3d")
node = 0  # Initialize the walking node
ani = animation.FuncAnimation(
    fig,
    _frame_update,
    init_func=init,
    interval=50,
    cache_frame_data=False,
    frames=100,
)

# %%
## To save the animation to a local file, comment in the following for GIF:
# ani.save(
#     "walk_rotating_graph.gif",
#     writer="imagemagick",
#     savefig_kwargs={"facecolor": "white"},
#     fps=20,
# )
## Or/end the following for MP4 in AV1 coding:
# Writer = animation.writers["ffmpeg"]
# writer = Writer(
#     fps=20,
#     metadata=dict(artist="matplotlib"),
#     bitrate=1800,
#     extra_args=["-vcodec", "av1", "-strict", "experimental"],
# )
# ani.save("walk_rotating_graph.mp4", writer=writer)

plt.show()

# %%
# .. tags:: plot-type: NetworkX, graph, 3D, animation

Autoscaling changes
```````````````````

Matplotlib used to recompute autoscaled limits after every plotting
(``plot()``, ``bar()``, etc.) call.  It now only does so when actually
rendering the canvas, or when the user queries the Axes limits.  This is a
major performance improvement for plots with a large number of artists.

In particular, this means that artists added manually with `Axes.add_line`,
`Axes.add_patch`, etc. will be taken into account by the autoscale, even
without an explicit call to `Axes.autoscale_view`.

In some cases, this can result in different limits being reported.  If this is
an issue, consider triggering a draw with `fig.canvas.draw`.

Autoscaling changes for Collections
```````````````````````````````````

Autoscaling has also changed for artists that are based on the `.Collection`
class.  Previously, the method that calculates the automatic limits
`.Collection.get_datalim` tried to take into account the size of objects
in the collection and make the limits large enough to not clip any of the
object, i.e., for `.Axes.scatter` it would make the limits large enough to not
clip any markers in the scatter.  This is problematic when the object size is
specified in physical space, or figure-relative space, because the transform
from physical units to data limits requires knowing the data limits, and
becomes invalid when the new limits are applied.  This is an inverse
problem that is theoretically solvable (if the object is physically smaller
than the axes), but the extra complexity was not deemed worth it, particularly
as the most common use case is for markers in scatter that are usually small
enough to be accommodated by the default data limit margins.

While the new behavior is algorithmically simpler, it is conditional on
properties of the `.Collection` object:

  1. ``offsets = None``, ``transform`` is a child of `.Axes.transData`: use the paths
     for the automatic limits (i.e. for `.LineCollection` in `Axes.streamplot`).
  2.  ``offsets != None``, and ``offset_transform`` is child of `.Axes.transData`:

    a) ``transform`` is child of `.Axes.transData`: use the ``path + offset`` for
        limits (i.e., for `.Axes.bar`).
    b) ``transform`` is not a child of `.Axes.transData`: just use the offsets
        for the limits (i.e. for scatter)

  3. otherwise return a null `.Bbox`.

While this seems complicated, the logic is simply to use the information from
the object that are in data space for the limits, but not information that is
in physical units.

LogLocator.nonsingular now maintains the orders of its arguments
````````````````````````````````````````````````````````````````

It no longer reorders them in increasing order.  The new behavior is consistent
with MaxNLocator.

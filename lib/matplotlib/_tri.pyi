# This is a private module implemented in C++
# As such these type stubs are overly generic, but here to allow these types
# as return types for public methods
from typing import Any

class TrapezoidMapTriFinder:
    def __init__(self, *args, **kwargs:Any) -> None: ...
    def find_many(self, *args, **kwargs:Any) -> Any: ...
    def get_tree_stats(self, *args, **kwargs:Any) -> Any: ...
    def initialize(self, *args, **kwargs:Any) -> Any: ...
    def print_tree(self, *args, **kwargs:Any) -> Any: ...

class TriContourGenerator:
    def __init__(self, *args, **kwargs:Any) -> None: ...
    def create_contour(self, *args, **kwargs:Any) -> Any: ...
    def create_filled_contour(self, *args, **kwargs:Any) -> Any: ...

class Triangulation:
    def __init__(self, *args, **kwargs:Any) -> None: ...
    def calculate_plane_coefficients(self, *args, **kwargs:Any) -> Any: ...
    def get_edges(self, *args, **kwargs:Any) -> Any: ...
    def get_neighbors(self, *args, **kwargs:Any) -> Any: ...
    def set_mask(self, *args, **kwargs:Any) -> Any: ...
